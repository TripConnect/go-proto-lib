// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: twofa_service.proto

package user_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TwoFactorAuthenticationService_GenerateSetting_FullMethodName  = "/backend.twofa_service.TwoFactorAuthenticationService/GenerateSetting"
	TwoFactorAuthenticationService_CreateSetting_FullMethodName    = "/backend.twofa_service.TwoFactorAuthenticationService/CreateSetting"
	TwoFactorAuthenticationService_ValidateResource_FullMethodName = "/backend.twofa_service.TwoFactorAuthenticationService/ValidateResource"
)

// TwoFactorAuthenticationServiceClient is the client API for TwoFactorAuthenticationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TwoFactorAuthenticationServiceClient interface {
	GenerateSetting(ctx context.Context, in *Generate2FaRequest, opts ...grpc.CallOption) (*Generate2FaResponse, error)
	CreateSetting(ctx context.Context, in *Create2FaRequest, opts ...grpc.CallOption) (*Create2FaResponse, error)
	ValidateResource(ctx context.Context, in *Validate2FaRequest, opts ...grpc.CallOption) (*Validate2FaResponse, error)
}

type twoFactorAuthenticationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTwoFactorAuthenticationServiceClient(cc grpc.ClientConnInterface) TwoFactorAuthenticationServiceClient {
	return &twoFactorAuthenticationServiceClient{cc}
}

func (c *twoFactorAuthenticationServiceClient) GenerateSetting(ctx context.Context, in *Generate2FaRequest, opts ...grpc.CallOption) (*Generate2FaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Generate2FaResponse)
	err := c.cc.Invoke(ctx, TwoFactorAuthenticationService_GenerateSetting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twoFactorAuthenticationServiceClient) CreateSetting(ctx context.Context, in *Create2FaRequest, opts ...grpc.CallOption) (*Create2FaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Create2FaResponse)
	err := c.cc.Invoke(ctx, TwoFactorAuthenticationService_CreateSetting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twoFactorAuthenticationServiceClient) ValidateResource(ctx context.Context, in *Validate2FaRequest, opts ...grpc.CallOption) (*Validate2FaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Validate2FaResponse)
	err := c.cc.Invoke(ctx, TwoFactorAuthenticationService_ValidateResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TwoFactorAuthenticationServiceServer is the server API for TwoFactorAuthenticationService service.
// All implementations must embed UnimplementedTwoFactorAuthenticationServiceServer
// for forward compatibility.
type TwoFactorAuthenticationServiceServer interface {
	GenerateSetting(context.Context, *Generate2FaRequest) (*Generate2FaResponse, error)
	CreateSetting(context.Context, *Create2FaRequest) (*Create2FaResponse, error)
	ValidateResource(context.Context, *Validate2FaRequest) (*Validate2FaResponse, error)
	mustEmbedUnimplementedTwoFactorAuthenticationServiceServer()
}

// UnimplementedTwoFactorAuthenticationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTwoFactorAuthenticationServiceServer struct{}

func (UnimplementedTwoFactorAuthenticationServiceServer) GenerateSetting(context.Context, *Generate2FaRequest) (*Generate2FaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateSetting not implemented")
}
func (UnimplementedTwoFactorAuthenticationServiceServer) CreateSetting(context.Context, *Create2FaRequest) (*Create2FaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSetting not implemented")
}
func (UnimplementedTwoFactorAuthenticationServiceServer) ValidateResource(context.Context, *Validate2FaRequest) (*Validate2FaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateResource not implemented")
}
func (UnimplementedTwoFactorAuthenticationServiceServer) mustEmbedUnimplementedTwoFactorAuthenticationServiceServer() {
}
func (UnimplementedTwoFactorAuthenticationServiceServer) testEmbeddedByValue() {}

// UnsafeTwoFactorAuthenticationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TwoFactorAuthenticationServiceServer will
// result in compilation errors.
type UnsafeTwoFactorAuthenticationServiceServer interface {
	mustEmbedUnimplementedTwoFactorAuthenticationServiceServer()
}

func RegisterTwoFactorAuthenticationServiceServer(s grpc.ServiceRegistrar, srv TwoFactorAuthenticationServiceServer) {
	// If the following call pancis, it indicates UnimplementedTwoFactorAuthenticationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TwoFactorAuthenticationService_ServiceDesc, srv)
}

func _TwoFactorAuthenticationService_GenerateSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Generate2FaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoFactorAuthenticationServiceServer).GenerateSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwoFactorAuthenticationService_GenerateSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoFactorAuthenticationServiceServer).GenerateSetting(ctx, req.(*Generate2FaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwoFactorAuthenticationService_CreateSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Create2FaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoFactorAuthenticationServiceServer).CreateSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwoFactorAuthenticationService_CreateSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoFactorAuthenticationServiceServer).CreateSetting(ctx, req.(*Create2FaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwoFactorAuthenticationService_ValidateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Validate2FaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoFactorAuthenticationServiceServer).ValidateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwoFactorAuthenticationService_ValidateResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoFactorAuthenticationServiceServer).ValidateResource(ctx, req.(*Validate2FaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TwoFactorAuthenticationService_ServiceDesc is the grpc.ServiceDesc for TwoFactorAuthenticationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TwoFactorAuthenticationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "backend.twofa_service.TwoFactorAuthenticationService",
	HandlerType: (*TwoFactorAuthenticationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateSetting",
			Handler:    _TwoFactorAuthenticationService_GenerateSetting_Handler,
		},
		{
			MethodName: "CreateSetting",
			Handler:    _TwoFactorAuthenticationService_CreateSetting_Handler,
		},
		{
			MethodName: "ValidateResource",
			Handler:    _TwoFactorAuthenticationService_ValidateResource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "twofa_service.proto",
}
