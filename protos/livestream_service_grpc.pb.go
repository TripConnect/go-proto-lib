// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: livestream_service.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LivetreamService_CreateLivestream_FullMethodName = "/backend.livestream_service.LivetreamService/CreateLivestream"
	LivetreamService_EndLivestream_FullMethodName    = "/backend.livestream_service.LivetreamService/EndLivestream"
	LivetreamService_FindLivestream_FullMethodName   = "/backend.livestream_service.LivetreamService/FindLivestream"
	LivetreamService_SearchLivestream_FullMethodName = "/backend.livestream_service.LivetreamService/SearchLivestream"
)

// LivetreamServiceClient is the client API for LivetreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LivetreamServiceClient interface {
	CreateLivestream(ctx context.Context, in *CreateLivestreamRequest, opts ...grpc.CallOption) (*Livestream, error)
	EndLivestream(ctx context.Context, in *EndLivestreamRequest, opts ...grpc.CallOption) (*Livestream, error)
	FindLivestream(ctx context.Context, in *FindLivestreamRequest, opts ...grpc.CallOption) (*Livestream, error)
	SearchLivestream(ctx context.Context, in *SearchLivestreamsRequest, opts ...grpc.CallOption) (*Livestreams, error)
}

type livetreamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLivetreamServiceClient(cc grpc.ClientConnInterface) LivetreamServiceClient {
	return &livetreamServiceClient{cc}
}

func (c *livetreamServiceClient) CreateLivestream(ctx context.Context, in *CreateLivestreamRequest, opts ...grpc.CallOption) (*Livestream, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Livestream)
	err := c.cc.Invoke(ctx, LivetreamService_CreateLivestream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *livetreamServiceClient) EndLivestream(ctx context.Context, in *EndLivestreamRequest, opts ...grpc.CallOption) (*Livestream, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Livestream)
	err := c.cc.Invoke(ctx, LivetreamService_EndLivestream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *livetreamServiceClient) FindLivestream(ctx context.Context, in *FindLivestreamRequest, opts ...grpc.CallOption) (*Livestream, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Livestream)
	err := c.cc.Invoke(ctx, LivetreamService_FindLivestream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *livetreamServiceClient) SearchLivestream(ctx context.Context, in *SearchLivestreamsRequest, opts ...grpc.CallOption) (*Livestreams, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Livestreams)
	err := c.cc.Invoke(ctx, LivetreamService_SearchLivestream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LivetreamServiceServer is the server API for LivetreamService service.
// All implementations must embed UnimplementedLivetreamServiceServer
// for forward compatibility.
type LivetreamServiceServer interface {
	CreateLivestream(context.Context, *CreateLivestreamRequest) (*Livestream, error)
	EndLivestream(context.Context, *EndLivestreamRequest) (*Livestream, error)
	FindLivestream(context.Context, *FindLivestreamRequest) (*Livestream, error)
	SearchLivestream(context.Context, *SearchLivestreamsRequest) (*Livestreams, error)
	mustEmbedUnimplementedLivetreamServiceServer()
}

// UnimplementedLivetreamServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLivetreamServiceServer struct{}

func (UnimplementedLivetreamServiceServer) CreateLivestream(context.Context, *CreateLivestreamRequest) (*Livestream, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLivestream not implemented")
}
func (UnimplementedLivetreamServiceServer) EndLivestream(context.Context, *EndLivestreamRequest) (*Livestream, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndLivestream not implemented")
}
func (UnimplementedLivetreamServiceServer) FindLivestream(context.Context, *FindLivestreamRequest) (*Livestream, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindLivestream not implemented")
}
func (UnimplementedLivetreamServiceServer) SearchLivestream(context.Context, *SearchLivestreamsRequest) (*Livestreams, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchLivestream not implemented")
}
func (UnimplementedLivetreamServiceServer) mustEmbedUnimplementedLivetreamServiceServer() {}
func (UnimplementedLivetreamServiceServer) testEmbeddedByValue()                          {}

// UnsafeLivetreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LivetreamServiceServer will
// result in compilation errors.
type UnsafeLivetreamServiceServer interface {
	mustEmbedUnimplementedLivetreamServiceServer()
}

func RegisterLivetreamServiceServer(s grpc.ServiceRegistrar, srv LivetreamServiceServer) {
	// If the following call pancis, it indicates UnimplementedLivetreamServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LivetreamService_ServiceDesc, srv)
}

func _LivetreamService_CreateLivestream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLivestreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LivetreamServiceServer).CreateLivestream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LivetreamService_CreateLivestream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LivetreamServiceServer).CreateLivestream(ctx, req.(*CreateLivestreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LivetreamService_EndLivestream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndLivestreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LivetreamServiceServer).EndLivestream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LivetreamService_EndLivestream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LivetreamServiceServer).EndLivestream(ctx, req.(*EndLivestreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LivetreamService_FindLivestream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindLivestreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LivetreamServiceServer).FindLivestream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LivetreamService_FindLivestream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LivetreamServiceServer).FindLivestream(ctx, req.(*FindLivestreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LivetreamService_SearchLivestream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchLivestreamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LivetreamServiceServer).SearchLivestream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LivetreamService_SearchLivestream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LivetreamServiceServer).SearchLivestream(ctx, req.(*SearchLivestreamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LivetreamService_ServiceDesc is the grpc.ServiceDesc for LivetreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LivetreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "backend.livestream_service.LivetreamService",
	HandlerType: (*LivetreamServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLivestream",
			Handler:    _LivetreamService_CreateLivestream_Handler,
		},
		{
			MethodName: "EndLivestream",
			Handler:    _LivetreamService_EndLivestream_Handler,
		},
		{
			MethodName: "FindLivestream",
			Handler:    _LivetreamService_FindLivestream_Handler,
		},
		{
			MethodName: "SearchLivestream",
			Handler:    _LivetreamService_SearchLivestream_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "livestream_service.proto",
}
